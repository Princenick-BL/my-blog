import React,{useState,useEffect,Suspense}  from 'react'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../../../styles/Home.module.scss'
import ArticlePreview from '../../../components/ArticlePreview'
import { getArticleByCat } from '../../../services/articles'
import {
  FireOutlined,
  TabletOutlined
} from '@ant-design/icons';

import {HomeMenu as Menu} from '../../../components/Menu'
import Loading from '../../../Loading'
import Script from 'next/script'
import * as gtag from '../../../lib/gtag'

export default function Category({location,articles,category}) {


  return (
    <>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
          <link href="https://fonts.googleapis.com/css?family=Inconsolata|Montserrat:400,500,600,700|Crimson+Text:400,600" rel="stylesheet"></link>
        </Head>
        <Script
          strategy="afterInteractive"
          src={`https://www.googletagmanager.com/gtag/js?id=${gtag.GA_TRACKING_ID}`}
        />
        <Script
          id="gtag-init"
          strategy="afterInteractive"
          dangerouslySetInnerHTML={{
            __html: `
              window.dataLayer = window.dataLayer || [];
              function gtag(){dataLayer.push(arguments);}
              gtag('js', new Date());
              gtag('config', '${gtag.GA_TRACKING_ID}', {
                page_path: window.location.pathname,
              });
            `,
          }}
        />
        <div className={styles.container}>
          <Menu/>
          <main className={styles.main + " "+styles.mTop}>
            <div className={styles.articles}>
              {/* <br></br>
              <input className={"searchInput"} type={"search"} placeholder='Search ...'/>
              <br></br> */}
              <h3 className={styles.h3}> <FireOutlined /> &nbsp; {category}</h3>
              <div className={styles.articleList}>
                {articles && articles.length >0 ? articles?.map((article,index)=>{
                  return(
                    <ArticlePreview
                      key={index}
                      odd = {index%2 === 0}
                      img={article?.poster}
                      category={article?.category}
                      title={article?.title}
                      url={`/article/${article?._id}/${article?.slug}`}
                      updatedAt = {article?.updatedAt}
                      description = {article?.description}
                    />
                    
                  )
                }):(
                  <Loading/>
                )}
               
              </div>
              <br></br>
              <div className={styles.readMore}>
                <div></div>
                <div className={styles.readmoreBlock}>
                  <a href='#'>{"Read more >"}</a>
                </div>
              </div>
            </div>
           
          </main>

          <footer className="ampstart-footer flex flex-column items-center px3">
            <nav className="ampstart-footer-nav">
                <ul className="list-reset flex flex-wrap mb3">
                  <li className="px1">
                      <a className="text-decoration-none ampstart-label" href="#">About</a>
                  </li>
                  <li className="px1">
                      <a className="text-decoration-none ampstart-label" href="#">Contact</a>
                  </li>
                  <li className="px1">
                      <a className="text-decoration-none ampstart-label" href="#">Terms</a>
                  </li>
                </ul>
            </nav>
            <small> Â© Your Company, 2016 </small>
          </footer>
        </div>
    </>
  )
}

export async function getServerSideProps(context) {
    // Fetch data from external API
    
    const { req, query, res, asPath, pathname } = context;
    const {blob}  = query
    
    if (req) {
      var host = req.headers.referer // will give you localhost:3000
    }

    const result = await getArticleByCat(blob)

    if(result?.success){
        return { 
            props: {
                location : host || "",
                articles : result?.data,
                category : blob
            } 
        }
    }
    // Pass data to the page via props

    return { 
        props: {
            location : host || "",
            category : blob
        } 
    }
  }